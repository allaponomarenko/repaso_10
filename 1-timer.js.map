{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["// Імпортуємо бібліотеку для вибору дати й часу flatpickr та її стилі\nimport flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\n\n// Імпортуємо бібліотеку для повідомлень iziToast та її стилі\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\n// Отримуємо елементи з HTML-документа\nconst datetimePicker = document.getElementById('datetime-picker');\nconst startButton = document.querySelector('[data-start]');\nconst daysValue = document.querySelector('[data-days]');\nconst hoursValue = document.querySelector('[data-hours]');\nconst minutesValue = document.querySelector('[data-minutes]');\nconst secondsValue = document.querySelector('[data-seconds]');\n\n// Глобальна змінна для обраної дати\n// Оголошуємо змінні для обраної дати та інтервалу таймера\nlet userSelectedDate = null;\nlet countdownInterval = null;\n\n// Спочатку кнопка Start неактивна\nstartButton.disabled = true;\n\n//Об’єкт налаштувань для flatpickr\nconst options = {\n  enableTime: true, // дозвіл вибору часу\n  time_24hr: true, // формат часу 24 години\n  defaultDate: new Date(), // поточна дата як значення за замовчуванням\n  minuteIncrement: 1, // крок у 1 хвилину\n  onClose(selectedDates) {\n    // функція виконується при закритті календаря\n    const selectedDate = selectedDates[0]; // отримуємо обрану дату\n    if (selectedDate <= new Date()) {\n      // Якщо дата в минулому або теперішня — показуємо попередження\n      iziToast.warning({\n        title: 'Warning',\n        message: 'Please choose a date in the future',\n        position: 'topCenter',\n      });\n      startButton.disabled = true; // блокуємо кнопку\n    } else {\n      // Якщо дата коректна (в майбутньому)\n      userSelectedDate = selectedDate; // зберігаємо обрану дату\n      startButton.disabled = false; // розблоковуємо кнопку Start\n    }\n  },\n};\n\n// Ініціалізація flatpickr на полі вводу\nflatpickr(datetimePicker, options);\n\n// Додаємо слухача події на кнопку Start\nstartButton.addEventListener('click', () => {\n  if (!userSelectedDate) return; // якщо дата не обрана — нічого не робимо\n\n  startButton.disabled = true; // блокуємо кнопку Start\n  datetimePicker.disabled = true; // блокуємо інпут вибору дати\n\n  // Запускаємо інтервал, що оновлюється щосекунди\n  countdownInterval = setInterval(() => {\n    const currentTime = new Date(); // поточний час\n    const timeDifference = userSelectedDate - currentTime; // різниця між обраною датою і поточним часом\n\n    if (timeDifference <= 0) {\n      // Якщо час вичерпано — зупиняємо таймер\n      clearInterval(countdownInterval);\n      datetimePicker.disabled = false; // знову дозволяємо обирати дату\n      updateTimer(0, 0, 0, 0); // виводимо нулі\n      return;\n    }\n\n    // Перетворюємо мілісекунди у дні, години, хвилини, секунди\n    const { days, hours, minutes, seconds } = convertMs(timeDifference);\n    updateTimer(days, hours, minutes, seconds); // оновлюємо інтерфейс\n  }, 1000);\n});\n\n// Функція оновлення інтерфейсу таймера\nfunction updateTimer(days, hours, minutes, seconds) {\n  daysValue.textContent = addLeadingZero(days);\n  hoursValue.textContent = addLeadingZero(hours);\n  minutesValue.textContent = addLeadingZero(minutes);\n  secondsValue.textContent = addLeadingZero(seconds);\n}\n\n// Функція для додавання початкового нуля (наприклад, 4 → 04)\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, '0');\n}\n\n// Функція перетворення мілісекунд на дні, години, хвилини, секунди\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n"],"names":["datetimePicker","startButton","daysValue","hoursValue","minutesValue","secondsValue","userSelectedDate","countdownInterval","options","selectedDates","selectedDate","iziToast","flatpickr","timeDifference","updateTimer","days","hours","minutes","seconds","convertMs","addLeadingZero","value","ms"],"mappings":"+IASA,MAAMA,EAAiB,SAAS,eAAe,iBAAiB,EAC1DC,EAAc,SAAS,cAAc,cAAc,EACnDC,EAAY,SAAS,cAAc,aAAa,EAChDC,EAAa,SAAS,cAAc,cAAc,EAClDC,EAAe,SAAS,cAAc,gBAAgB,EACtDC,EAAe,SAAS,cAAc,gBAAgB,EAI5D,IAAIC,EAAmB,KACnBC,EAAoB,KAGxBN,EAAY,SAAW,GAGvB,MAAMO,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CAErB,MAAMC,EAAeD,EAAc,CAAC,EAChCC,GAAgB,IAAI,MAEtBC,EAAS,QAAQ,CACf,MAAO,UACP,QAAS,qCACT,SAAU,WAClB,CAAO,EACDV,EAAY,SAAW,KAGvBK,EAAmBI,EACnBT,EAAY,SAAW,GAE1B,CACH,EAGAW,EAAUZ,EAAgBQ,CAAO,EAGjCP,EAAY,iBAAiB,QAAS,IAAM,CACrCK,IAELL,EAAY,SAAW,GACvBD,EAAe,SAAW,GAG1BO,EAAoB,YAAY,IAAM,CAEpC,MAAMM,EAAiBP,EADH,IAAI,KAGxB,GAAIO,GAAkB,EAAG,CAEvB,cAAcN,CAAiB,EAC/BP,EAAe,SAAW,GAC1Bc,EAAY,EAAG,EAAG,EAAG,CAAC,EACtB,MACD,CAGD,KAAM,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUN,CAAc,EAClEC,EAAYC,EAAMC,EAAOC,EAASC,CAAO,CAC1C,EAAE,GAAI,EACT,CAAC,EAGD,SAASJ,EAAYC,EAAMC,EAAOC,EAASC,EAAS,CAClDhB,EAAU,YAAckB,EAAeL,CAAI,EAC3CZ,EAAW,YAAciB,EAAeJ,CAAK,EAC7CZ,EAAa,YAAcgB,EAAeH,CAAO,EACjDZ,EAAa,YAAce,EAAeF,CAAO,CACnD,CAGA,SAASE,EAAeC,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC,CAGA,SAASF,EAAUG,EAAI,CAMrB,MAAMP,EAAO,KAAK,MAAMO,EAAK,KAAG,EAC1BN,EAAQ,KAAK,MAAOM,EAAK,MAAO,IAAI,EACpCL,EAAU,KAAK,MAAQK,EAAK,MAAO,KAAQ,GAAM,EACjDJ,EAAU,KAAK,MAASI,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAP,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC"}